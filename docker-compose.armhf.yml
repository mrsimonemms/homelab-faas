version: "3.4"
services:

#  caddy:
#    image: riggerthegeek/caddy-proxy:0.1.0
#    ports:
#      - "80:80"
#      - "443:443"
#    depends_on:
#      - gwnginx
#    networks:
#      - functions
#    environment:
#      DOMAIN_NAME: simonemms.co.uk
#      EMAIL_ADDRESS: simon@simonemms.com
#      PROXY_URL: gwnginx:8080
#    volumes:
#      - type: volume
#        source: certs
#        target: /opt/certs
#    deploy:
#      replicas: 2
#      restart_policy:
#        condition: on-failure
#        delay: 10s
#        max_attempts: 3
#        window: 120s
#      update_config:
#        parallelism: 1
#        delay: 10s

  # Core API services are pinned, HA is provided for functions.
  gwnginx:
    image: riggerthegeek/faas-password-gateway:0.1
    logging: *default-logging
    ports:
      - 8080:8080
    depends_on:
      - gateway
    networks:
      - functions
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 10s
    secrets:
      - openfaas_htpasswd

  gateway:
#    ports:
#      - 8080:8080
    image: functions/gateway:0.7.3-armhf
    logging: *default-logging
    networks:
      - functions
    environment:
      functions_provider_url: "http://faas-swarm:8080/"
      read_timeout:  30   # set both here, and on your functions
      write_timeout: 30   # set both here, and on your functions
      dnsrr: "true"  # Temporarily use dnsrr in place of VIP while issue persists on PWD
      faas_nats_address: "nats"
      faas_nats_port: 4222
    deploy:
      replicas: 2
      resources:
        # limits:   # uncomment to enable limits
        #     memory: 100M
        reservations:
          memory: 100M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 20
        window: 380s

  # Docker Swarm provider
  faas-swarm:
    logging: *default-logging
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    # ports:
      # - 8081:8080
    image:  functions/faas-swarm:0.2.1-armhf
    networks:
      - functions
    environment:
      read_timeout:  30   # set both here, and on your functions
      write_timeout: 30   # set both here, and on your functions
      DOCKER_API_VERSION: "1.30"
    deploy:
      replicas: 2
      placement:
        constraints:
          - "node.role == manager"
          - "node.platform.os == linux"
      resources:
        # limits:   # uncomment to enable limits
        #     memory: 100M
        reservations:
          memory: 100M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 20
        window: 380s

  nats:
    image: nats-streaming:0.6.0
    logging: *default-logging
    # Uncomment the following port mappings if you wish to expose the
    # NATS client and/or management ports
    # ports:
    #     - 4222:4222
    #     - 8222:8222
    command: "--store memory --cluster_id faas-cluster"
    networks:
      - functions
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 125M
        reservations:
          memory: 50M
      placement:
        constraints:
          - "node.platform.os == linux"

  queue-worker:
    image: functions/queue-worker:0.4-armhf
    logging: *default-logging
    networks:
      - functions
    environment:
      max_inflight: "1"
      ack_timeout: "30s"    # Max duration of any async task / request
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 50M
        reservations:
          memory: 20M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 20
        window: 380s
      placement:
        constraints:
          - "node.platform.os == linux"

  # Crons go here
  cron-mileage:
    image: riggerthegeek/cron-mileage:0.0.0
    logging: *default-logging
    depends_on:
      - gateway
    networks:
      - functions
    environment:
      - CRON_SCHEDULE=*/30 * * * *
      - FAAS_URL=http://gateway:8080
    secrets:
      - cron-mileage-freeagent-token
      - cron-mileage-google-calendarId
      - cron-mileage-google-token
      - cron-mileage-mailgun-domain
      - cron-mileage-mailgun-key
      - cron-mileage-notify-from
      - cron-mileage-notify-to
      - cron-mileage-snitch-url
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 10s


  cron-starling:
    image: riggerthegeek/cron-starling:0.0.0
    logging: *default-logging
    depends_on:
    - gateway
    networks:
    - functions
    environment:
    - CRON_SCHEDULE=0 * * * *
    - FAAS_URL=http://gateway:8080
    secrets:
    - cron-starling-freeagent-account-id
    - cron-starling-freeagent-token
    - cron-starling-mailgun-domain
    - cron-starling-mailgun-key
    - cron-starling-notify-from
    - cron-starling-snitch-url
    - cron-starling-notify-to
    - cron-starling-token
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 10s

  # Functions go here
  debug:
    image: functions/nodeinfo:latest-armhf
    logging: *default-logging
    labels:
      function: "true"
    depends_on:
      - gateway
    networks:
      - functions
    environment:
      no_proxy: "gateway"
      https_proxy: $https_proxy
      read_timeout:  30   # set both here, and on your functions
      write_timeout: 30   # set both here, and on your functions
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 10s

  distance-finder:
    image: riggerthegeek/function-distance-finder:0.1.0
    logging: *default-logging
    labels:
      function: "true"
    depends_on:
      - gateway
    networks:
      - functions
    environment:
      no_proxy: "gateway"
      https_proxy: $https_proxy
      read_timeout:  30   # set both here, and on your functions
      write_timeout: 30   # set both here, and on your functions
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 10s

  freeagent:
    image: riggerthegeek/function-freeagent:0.2.0
    logging: *default-logging
    labels:
      function: "true"
    depends_on:
      - gateway
    networks:
      - functions
    environment:
      BASE_URL: https://api.freeagent.com
      no_proxy: "gateway"
      https_proxy: $https_proxy
      read_timeout:  30   # set both here, and on your functions
      write_timeout: 30   # set both here, and on your functions
    secrets:
      - freeagent_client_id
      - freeagent_client_secret
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 10s

  google-calendar:
    image: riggerthegeek/function-google-calendar:0.1.4
    logging: *default-logging
    labels:
      function: "true"
    depends_on:
      - gateway
    networks:
      - functions
    environment:
      no_proxy: "gateway"
      https_proxy: $https_proxy
      read_timeout:  30   # set both here, and on your functions
      write_timeout: 30   # set both here, and on your functions
    secrets:
      - google_calendar_client_id
      - google_calendar_client_secret
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 10s

  starling:
    image: riggerthegeek/function-starling-bank:0.1.2
    logging: *default-logging
    labels:
      function: "true"
    depends_on:
      - gateway
    networks:
      - functions
    environment:
      BASE_URL: https://api.starlingbank.com
      EXCHANGE_TOKENS: "false" # We're using a personal access token
      no_proxy: "gateway"
      https_proxy: $https_proxy
      read_timeout:  30   # set both here, and on your functions
      write_timeout: 30   # set both here, and on your functions
    secrets:
      - starling_client_id
      - starling_client_secret
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 10s

#  get-iplayer:
#    image: riggerthegeek/function-get-iplayer:latest
#    labels:
#      function: "true"
#    depends_on:
#      - gateway
#    networks:
#      - functions
#    environment:
#      no_proxy: "gateway"
#      https_proxy: $https_proxy
#    deploy:
#      replicas: 1
#      restart_policy:
#        condition: on-failure
#        delay: 10s
#        max_attempts: 3
#        window: 120s
#      update_config:
#        parallelism: 1
#        delay: 10s
#    secrets:
#      - dropboxKey

#    configs:
#      - source: prometheus-alerts
#        target: /etc/prometheus/alert.rules
#      - source: prometheus
#        target: /etc/prometheus/prometheus.yml

#configs:
#  prometheus-alerts:
#    file: ./prometheus/alert.rules
#  prometheus-alertmanager:
#    file: ./prometheus/alertmanager.yml
#  prometheus:
#    file: ./prometheus/prometheus.yml

volumes:
  certs:

networks:
  functions:
    driver: overlay
    attachable: true
    labels:
      - "openfaas=true"

x-logging:
  &default-logging
  driver: syslog
  options:
    syslog-address: ${DOCKER_LOG_ADDRESS}
    tag: "{{.Name}}/{{.ID}}"

secrets:
  cron-mileage-freeagent-token:
    external: true
  cron-mileage-google-calendarId:
    external: true
  cron-mileage-google-token:
    external: true
  cron-mileage-mailgun-domain:
    external: true
  cron-mileage-mailgun-key:
    external: true
  cron-mileage-notify-from:
    external: true
  cron-mileage-notify-to:
    external: true
  cron-mileage-snitch-url:
    external: true
  cron-starling-faas-username:
    external: true
  cron-starling-faas-password:
    external: true
  cron-starling-freeagent-account-id:
    external: true
  cron-starling-freeagent-token:
    external: true
  cron-starling-mailgun-domain:
    external: true
  cron-starling-mailgun-key:
    external: true
  cron-starling-notify-from:
    external: true
  cron-starling-snitch-url:
    external: true
  cron-starling-notify-to:
    external: true
  cron-starling-token:
    external: true
  freeagent_client_id:
    external: true
  freeagent_client_secret:
    external: true
  google_calendar_client_id:
    external: true
  google_calendar_client_secret:
    external: true
  openfaas_htpasswd:
    external: true
  starling_client_id:
    external: true
  starling_client_secret:
    external: true
